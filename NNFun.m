function [y1] = NNFun(x1)
%NNFUN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 01-Aug-2016 16:18:05.
% 
% [y1] = NNFun(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.6;576.2];
x1_step1.gain = [0.00638162093171666;0.00163185378590078];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4490511767572452;2.4760032574005284;-6.0655308015974105;0.55735476434267228;0.42212520404433873;0.82086164481154389;1.6240019537079353;-3.5058047923686302;-5.3917349611133574;0.14915559595342509];
IW1_1 = [-0.37713743560066454 -3.9062241366176207;-2.5737301729057833 -2.2677081063612508;8.1856827722032541 -34.272366680456081;-1.7389711370748566 0.52704217799864106;-0.75985263278382897 -0.85488967373956282;0.45926495918798005 -5.3152649803270862;1.3462755406758513 2.6002828891938661;0.17101126008057069 -10.191527099404377;-0.77228427659006371 -5.0538206758762438;0.53000594873828555 -0.43102330834713831];

% Layer 2
b2 = [0.22288725536857149;3.2359160324777823];
LW2_1 = [1.0896675402177833 -0.0030472458916194559 -0.029305598156988046 0.15695526517782904 -0.64721190262625117 -0.0038019909679725852 0.15369193913538148 0.0009251038316117489 -0.76884622342656883 1.4153214783636239;9.2994487457767203 0.48744514393111404 -0.34341688386620339 1.221234605765011 -1.0815645032984864 0.17626911748964824 0.74703669877443013 0.38089209879735592 -5.0354757489790893 2.8249991611115002];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.00101988781234064;0.00112739571589628];
y1_step1.xoffset = [-176.7;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
