function [y1] = NNFun(x1)
%NNFUN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 01-Aug-2016 14:37:04.
% 
% [y1] = NNFun(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.6;576.2];
x1_step1.gain = [0.00638162093171666;0.00163185378590078];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.0057174270419438;-1.5861884671624464;3.1667860005064368;-0.44417165867387964;2.7133900332605796;-0.14001068789223237;-0.40724846216249222;-0.23678584823026594;3.6180971744092183;6.3617201404272281];
IW1_1 = [2.8042059976956648 0.18281520040981206;1.6767748848683235 1.5278634210259214;-4.6923882756309165 5.2847636992370752;1.5009481917914196 -0.23948535392628845;-3.7420192987704701 15.08042121317184;-3.9413440774613289 -4.9130006269795379;-1.4453436029219771 1.5653305388083192;0.7329017057552587 0.12666563555350785;1.1587470546787511 5.7106357445371945;3.6892043223258852 2.2358677500061015];

% Layer 2
b2 = [0.00072765945424506373;-3.3880625875386161];
LW2_1 = [0.11477964478457445 -0.11941709819514923 -0.034297729709699666 -0.61200984970090389 0.049461228534791429 0.03718343391051683 -0.22548499364247063 2.2889597001259614 -0.039638807998661291 0.34962967746927959;-2.3330687145656412 -0.91153639390102359 -0.25332734712572585 -2.7206986304713978 0.36859614551367947 0.14242915935312722 -0.68151865455101068 5.432958390677654 -0.30940585445898666 1.1504373058394033];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.00101988781234064;0.00112739571589628];
y1_step1.xoffset = [-176.7;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
