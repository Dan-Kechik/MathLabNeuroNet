function [y1] = NNFun(x1)
%NNFUN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 01-Aug-2016 16:07:05.
% 
% [y1] = NNFun(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.6;576.2];
x1_step1.gain = [0.00638162093171666;0.00163185378590078];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.4478268349211807;-0.25308256946458757;-0.076523612864226306;-1.1368725265092861;-2.5236016523399774;0.090855381488719383;-2.1700168072984813;-0.71968570220365868;19.460564043015541;1.6714560450211564];
IW1_1 = [0.75799871754911796 6.0032704870203411;0.093716442594421384 3.3350374160290959;0.48269909919637793 -0.0019918862068481306;-3.3289777034523644 -0.16678242819934819;2.1595946882434265 -4.0311827759938437;0.17028117927696207 2.8374202353237172;-1.270535561406958 -8.5783014560369306;-1.5699048789537515 1.8162953511495754;19.26494521648932 4.4107469301581714;1.3971341159537274 -0.46591461864910949];

% Layer 2
b2 = [-0.16442742989968448;-1.882782829742224];
LW2_1 = [-0.50565260642654419 -0.62067351469409637 1.7421411612654849 0.024845346563011416 0.012009627109546521 1.0051077577007583 -0.24436509467845191 -0.040078574127105755 0.010482153122069406 0.36136297787913602;-5.8501068760837738 -6.2005283688030861 -3.347448079270229 -0.49015276036576133 0.64325570560711831 9.6280970464089641 -3.4291991364602126 -0.58822616018190044 0.17498490711047487 1.7042768096749676];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.00101988781234064;0.00112739571589628];
y1_step1.xoffset = [-176.7;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
