function [y1] = NNFun(x1)
%NNFUN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 01-Aug-2016 16:35:59.
% 
% [y1] = NNFun(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [22;118.5;29.5;31.1;79.3;69.4;85;47.2;33;19.1;24.8;21;15.8];
x1_step1.gain = [0.0338983050847458;0.00817494379726139;0.0414507772020725;0.099502487562189;0.0351493848857645;0.0254129606099111;0.0318979266347687;0.0498753117206983;0.124223602484472;0.135135135135135;0.099009900990099;0.143884892086331;0.357142857142857];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.9374700180578381;-0.22685568971316511;0.30459392270202285;0.23879889453040909;-0.26162611901335686;2.5438031997178507;-0.040529333900121103;2.1852861847920511;-0.89832110618820815;1.6085362935173715];
IW1_1 = [1.2240691613712622 0.31626886408321442 1.9530891054214963 -0.99946704929586616 -1.2872489959646229 -0.44602802518673129 0.19931812418393352 0.76027274378550946 -0.015220084084026683 -1.6858547516400018 0.84270899128362275 0.94457224049541499 -0.6336394773667805;-1.36007626973877 0.25568163341202127 0.96402045985977924 -1.1955168021833584 0.31636452893198974 -0.095075359711031759 -0.76739183119413679 1.5318069602287752 -0.59407361758298616 -1.2659368624206149 0.50648854614379624 -0.15074227131548446 -0.10364940446398797;0.16929191570034918 0.80654048699925207 3.4467674428682136 -0.8685965614925486 0.29372564243260951 -1.4757721214302413 -0.031409040468389132 0.15004072726382853 1.01305892035718 -1.4667251699546389 1.1442359817826384 -0.54887370094089571 0.48719230713946604;0.44032874269209382 0.15353074343731793 0.59207282685277784 -0.6425676037396304 1.1011858042254072 -1.4639463075308385 0.04713905103975792 0.26404408841300814 0.27530947030047165 -0.48042861781131113 -0.37814169311948631 -0.55053894981867268 0.076917911483115206;1.7254617265233132 0.14645380624815207 -0.4828558572481485 0.46106291828827684 0.42973930742071342 -0.69414161659011975 -1.0705872059280204 -0.92839111317356715 0.3079959995592082 1.4227006179987558 0.24630968847032964 -0.27058702518524025 -0.94221810188272193;0.52631339864257354 -2.1724734970408202 -1.839640934203246 0.18436590985816093 3.2101798790063967 0.69558938606942133 1.6059720774233464 -0.43457870689986189 0.46288292125591868 2.2190688544543997 -0.39993146800226681 -2.0134364694503755 -0.022237981423499462;-1.4449068277910522 -0.33881966853721279 0.28986474640912091 2.1664280223456243 -1.4487204704074244 1.4904471433939384 1.2964071233103309 -1.087904673968231 0.060226187716409585 -2.1997199489156718 0.63578030113617601 -1.101329439503695 -0.10001026486408782;0.58567448526366928 0.75416405622465266 3.0201606354112762 0.92386751883789364 -0.93458793611306767 0.55264055324873729 1.6796030440553842 0.06294755331958457 -1.6288611518672225 0.60372727410541704 -1.0439250644736415 -2.0791902753481293 -0.14975280194166815;0.96182194707559332 -0.058746180451869516 2.0169106542268183 0.60452472143800329 -1.0825773876238665 -0.63169190819720611 2.9814015066314425 -0.73000917432785484 -0.81994723688302118 1.2440490896161966 1.3634955909817483 -0.18926974041620276 -0.22274312008655175;0.7919169910055619 1.4211264186712929 0.35626210235729849 -0.75901923489062051 0.21283639591059661 1.7470840119832933 -0.43713515899038996 -0.025453330789601825 -0.4368952332807986 0.3417569131859437 0.45484236130896011 0.061281564908089517 -1.0526749553736257];

% Layer 2
b2 = 0.47811993766325328;
LW2_1 = [0.37537458094720066 -0.43300990427373437 -1.2866248543548275 -0.68743433477989202 -0.40345316571241935 0.26024852416621835 0.0053343937481882646 0.93798902170192844 -0.61874848550224604 0.49049067524110507];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0421052631578947;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
